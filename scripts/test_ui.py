# =================================================================================================
# =================================================================================================
#
#               INTERFACE DE TESTE E DEMONSTRA√á√ÉO (STREAMLIT UI)
#
# Vis√£o Geral do M√≥dulo:
#
# Este arquivo cria uma interface web local usando a biblioteca Streamlit. Ele serve como
# uma ferramenta de desenvolvimento e depura√ß√£o ("playground") para o microsservi√ßo 'nt-ai',
# permitindo que os desenvolvedores testem a cadeia de IA de forma interativa sem
# a necessidade de usar clientes de API como Postman ou cURL.
#
# Arquitetura e Fluxo de Trabalho:
#
# 1. Interface do Usu√°rio (UI):
#    - Renderiza um t√≠tulo, uma descri√ß√£o e um campo de texto onde o desenvolvedor
#      pode inserir uma pergunta em linguagem natural.
#
# 2. A√ß√£o do Usu√°rio:
#    - Ao clicar no bot√£o "Analisar com IA", o script √© acionado.
#
# 3. Comunica√ß√£o com a API:
#    - O script envia a pergunta do usu√°rio em uma requisi√ß√£o HTTP POST para o endpoint
#      `/debug-query` do microsservi√ßo FastAPI, que deve estar rodando localmente.
#
# 4. Processamento da Resposta:
#    - Aguarda a resposta do endpoint de debug, que cont√©m os resultados intermedi√°rios
#      do processamento da IA.
#
# 5. Exibi√ß√£o dos Resultados:
#    - Se a requisi√ß√£o for bem-sucedida, a interface exibe de forma clara e separada:
#      a) A "Query Otimizada" (sa√≠da da primeira cadeia, o Enhancer).
#      b) O "JSON de Filtros Extra√≠do" (sa√≠da da segunda cadeia, o Parser).
#
# 6. Tratamento de Erros:
#    - Exibe mensagens de erro amig√°veis na interface caso o microsservi√ßo esteja
#      offline ou retorne um erro.
#
# Como Usar:
#
# 1. Certifique-se de que o microsservi√ßo FastAPI esteja rodando (uvicorn app.main:app).
# 2. Execute este script a partir do diret√≥rio raiz do projeto com o comando:
#    > streamlit run scripts/test_ui.py
#
# =================================================================================================
# =================================================================================================

import streamlit as st
import requests
import json

# --- Configura√ß√£o da P√°gina ---
# Define o t√≠tulo e o √≠cone que aparecer√£o na aba do navegador.
st.set_page_config(
    page_title="New Tracking Intent AI - Teste",
    page_icon="ü§ñ"
)

# --- Renderiza√ß√£o do Cabe√ßalho da UI ---
# Exibe os textos principais da interface.
st.title("ü§ñ Interface de Teste - New Tracking Intent AI")
st.header("An√°lise de Inten√ß√£o de Busca")
st.caption("Esta UI usa o endpoint de debug para mostrar os passos da IA.")

# Define a URL do endpoint de debug do microsservi√ßo FastAPI.
MICROSERVICE_URL = "http://127.0.0.1:5001/debug-query"

# --- Interface Interativa ---

# Cria o campo de texto para a entrada do usu√°rio.
query = st.text_input(
    "Digite sua consulta em linguagem natural:", 
    placeholder="Ex: notas do cliente acme transp veloz ordene por valor"
)

# Cria o bot√£o que dispara a an√°lise. O c√≥digo dentro deste 'if' s√≥ √©
# executado quando o bot√£o √© clicado.
if st.button("Analisar com IA"):
    # Valida√ß√£o de entrada: verifica se o usu√°rio digitou algo.
    if not query:
        st.warning("Por favor, digite uma consulta antes de analisar.")
    else:
        # Exibe uma mensagem de "carregando" enquanto a requisi√ß√£o est√° em andamento.
        # O bloco `with` garante que a mensagem desapare√ßa ao final.
        with st.spinner('Analisando sua pergunta com a IA...'):
            try:
                # Prepara o payload JSON para a requisi√ß√£o POST.
                payload = {"query": query}
                # Envia a requisi√ß√£o para a API do microsservi√ßo.
                response = requests.post(MICROSERVICE_URL, json=payload)
                
                # Caminho de sucesso: a API respondeu corretamente.
                if response.status_code == 200:
                    st.success("An√°lise conclu√≠da com sucesso!")
                    
                    # Extrai os dados da resposta JSON.
                    result_data = response.json()
                    
                    # Usa o m√©todo .get() para acessar as chaves de forma segura,
                    # evitando erros caso uma chave n√£o esteja presente na resposta.
                    enhanced_query = result_data.get("enhanced_query", "N√£o foi poss√≠vel gerar a query otimizada.")
                    parsed_json = result_data.get("parsed_json", {})

                    # Exibe os resultados formatados na interface.
                    st.subheader("1. Query Otimizada (Enhanced Query):")
                    st.info(enhanced_query)
                    
                    st.subheader("2. Filtros JSON Extra√≠dos:")
                    # st.json() √© um componente do Streamlit que renderiza
                    # dicion√°rios/JSON de forma interativa e leg√≠vel.
                    st.json(parsed_json)
                
                # Trata o caso em que a API retornou um c√≥digo de erro (ex: 400, 500).
                else:
                    error_details = response.json().get('detail', 'Erro desconhecido.')
                    st.error(f"Erro ao chamar o microsservi√ßo (Status {response.status_code}): {error_details}")

            # Trata o caso em que n√£o foi poss√≠vel conectar ao microsservi√ßo (ex: est√° offline).
            except requests.exceptions.RequestException as e:
                st.error(f"N√£o foi poss√≠vel conectar ao microsservi√ßo. Verifique se ele est√° rodando. Detalhes: {e}")