================================================================================
================================================================================
==
==    DOCUMENTAÇÃO TÉCNICA DA STORED PROCEDURE: [dbo].[SP_TK_NOTAS_AI_HOM]
==
================================================================================
================================================================================

Versão: 1.0
Data: 17/10/2025
Autor: Marcos Rodrigues

--------------------------------------------------------------------------------
1. VISÃO GERAL
--------------------------------------------------------------------------------

A procedure [SP_TK_NOTAS_AI_HOM] é o principal ponto de consulta de dados para o sistema New Tracking. Ela foi projetada especificamente para ser consumida pelo microsserviço de inteligência artificial (nt-ai), traduzindo os filtros JSON gerados pela IA em uma consulta SQL dinâmica e performática.

Sua principal função é retornar uma lista de notas fiscais e seus dados associados, com base em uma combinação flexível de filtros de data, categoria, texto e regras de permissão de usuário.

--------------------------------------------------------------------------------
2. ARQUITETURA E LÓGICA DE EXECUÇÃO
--------------------------------------------------------------------------------

Para garantir a máxima performance e evitar consultas lentas na view principal (VW_NOTAS), a procedure opera em um fluxo de duas etapas:

1. Pré-Filtragem em Tabela Temporária: A primeira e mais crucial etapa é a criação de uma tabela temporária (#FilteredData). A procedure aplica TODOS os filtros de dados (@NF, @DE/@ATE, @Cliente, @SituacaoNF, etc.) em uma única consulta SELECT ... INTO #FilteredData. Isso cria um subconjunto de dados muito pequeno e relevante.

2. Consulta Principal e Enriquecimento: A consulta final, que contém todos os LEFT JOINs complexos para enriquecer os dados (buscar nomes de usuários, informações de nível de serviço, etc.), é executada apenas sobre a tabela temporária #FilteredData, e não sobre a VW_NOTAS inteira. Isso garante que a parte mais pesada da consulta opere no menor conjunto de dados possível.

--------------------------------------------------------------------------------
2.1. Fonte de Dados Principal: A View `VW_NOTAS`
--------------------------------------------------------------------------------

Toda a lógica da procedure opera sobre a view `[dbo].[VW_NOTAS]`. Esta view é a "fonte da verdade" e foi projetada para consolidar e pré-calcular dados de múltiplas tabelas do sistema, simplificando as consultas.

As responsabilidades da `VW_NOTAS` incluem:

1.  **Unificar Dados de Notas:** Juntar informações de tabelas de notas fiscais, conhecimentos de transporte (CT-e), clientes, transportadoras e ocorrências.

2.  **Calcular Status Derivados:** A view contém a lógica de negócio para gerar as colunas de status que a procedure utiliza para filtrar. As duas mais importantes são:
    * `SituacaoNF`: É calculada com base no fluxo de eventos da nota (se foi expedida, se tem ocorrência de retenção, se foi entregue). Representa o **estado físico**.
    * `AnaliseData`: É calculada comparando a `PrevisaoEntrega` com a data atual (`GETDATE()`) e a `DataEntrega`. Representa a **análise de performance**.

3.  **Consolidar Chaves de Múltiplos Sistemas:** A view já lida com a complexidade de unir dados que podem vir de diferentes fontes (como Protheus e outros sistemas), expondo chaves unificadas.

Compreender que a `VW_NOTAS` já entrega os dados pré-processados é fundamental para entender a performance e a lógica da procedure.

--------------------------------------------------------------------------------
3. DETALHAMENTO DOS PARÂMETROS
--------------------------------------------------------------------------------

3.1. Filtros Principais
--------------------------------------------------
PARÂMETRO: @IdUsuario
TIPO DE DADO: INT
DESCRIÇÃO: OBRIGATÓRIO. O ID do usuário que está fazendo a consulta. É usado no final para aplicar as regras de permissão de acesso.
--------------------------------------------------
PARÂMETRO: @NF
TIPO DE DADO: INT
DESCRIÇÃO: O número exato de uma Nota Fiscal. Se fornecido, este filtro tem PRIORIDADE MÁXIMA e a procedure buscará apenas por esta NF.
--------------------------------------------------
PARÂMETRO: @DE, @ATE
TIPO DE DADO: DATETIME
DESCRIÇÃO: Definem o período de tempo ("janela") para a consulta. Funcionam em conjunto com o @TipoData. A lógica interna ajusta o @ATE para o final do dia (23:59:59) para garantir a inclusão de todos os registros.
--------------------------------------------------
PARÂMETRO: @TipoData
TIPO DE DADO: VARCHAR(1)
DESCRIÇÃO: SELETOR DE EVENTO. Determina em qual coluna de data o período @DE/@ATE será aplicado. Se for nulo, o filtro de data não é aplicado. (Ver Seção 4 para detalhes).
--------------------------------------------------

3.2. Filtros Categoriais (Gerados pela IA)
--------------------------------------------------
PARÂMETRO: @Cliente
COLUNA FILTRADA: vw.Tomador
TIPO DE FILTRO: Parcial (LIKE '%valor%')
--------------------------------------------------
PARÂMETRO: @Transportadora
COLUNA FILTRADA: vw.Parceiro
TIPO DE FILTRO: Parcial (LIKE '%valor%')
--------------------------------------------------
PARÂMETRO: @UFDestino
COLUNA FILTRADA: vw.UFDestino
TIPO DE FILTRO: Exato (= 'valor')
--------------------------------------------------
PARÂMETRO: @CidadeDestino
COLUNA FILTRADA: vw.Destino
TIPO DE FILTRO: Parcial (LIKE '%valor%')
--------------------------------------------------
PARÂMETRO: @Operacao
COLUNA FILTRADA: vw.Operacao
TIPO DE FILTRO: Exato (= 'valor')
--------------------------------------------------
PARÂMETRO: @SituacaoNF
COLUNA FILTRADA: vw.SituacaoNF
TIPO DE FILTRO: Exato (= 'valor')
--------------------------------------------------
PARÂMETRO: @StatusAnaliseData
COLUNA FILTRADA: vw.AnaliseData
TIPO DE FILTRO: Exato (= 'valor')
--------------------------------------------------
PARÂMETRO: @CNPJRaizTransp
COLUNA FILTRADA: vw.CNPJRaizTransp
TIPO DE FILTRO: Exato (= 'valor')
--------------------------------------------------

3.2.1. Detalhe da Lógica do Parâmetro @SituacaoNF (Estado Logístico)
----------------------------------------------------------------------

O parâmetro @SituacaoNF responde à pergunta fundamental: "Onde está a nota fiscal AGORA?". Ele representa o estado físico e logístico atual da entrega, fornecendo uma "foto" do momento da consulta.

**Interação com a Procedure e o Banco de Dados:**

-   **Parâmetro na Procedure:** `@SituacaoNF VARCHAR(100)`
-   **Coluna Filtrada:** `vw.SituacaoNF` na view `VW_NOTAS`.
-   **Mecanismo de Filtro:** A procedure aplica um filtro de igualdade exata: `... AND vw.SituacaoNF = @SituacaoNF`.

Isso significa que a lógica para definir o estado logístico de uma nota já foi calculada e materializada na coluna `vw.SituacaoNF` dentro da view. A seguir, detalhamos o que cada valor significa e qual é a lógica provável por trás de seu cálculo no banco de dados.

---
VALOR: 'ENTREGUE'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A entrega foi fisicamente concluída e a mercadoria foi recebida pelo destinatário. Este é o estado final e bem-sucedido de uma operação logística.
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
A coluna `SituacaoNF` recebe 'ENTREGUE' quando a coluna `DataEntrega` é preenchida com uma data válida (diferente de '1900-01-01') ou quando uma ocorrência final de entrega é registrada. A condição seria algo como:
`CASE WHEN DataEntrega IS NOT NULL AND DataEntrega > '1900-01-01' THEN 'ENTREGUE' ... END`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
"notas com status entregue", "entregas já finalizadas", "notas que já chegaram".
--------------------------------------------------
VALOR: 'RETIDA'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A entrega está parada e não pode prosseguir devido a um problema externo, geralmente de natureza fiscal (ex: posto de fiscalização, documentação pendente). A mercadoria não está em posse nem da transportadora (para movimentação) nem do cliente.
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
Este status é tipicamente derivado de códigos de ocorrência específicos (`CodOcorrencia`) que indicam retenção. A lógica seria:
`CASE WHEN CodOcorrencia IN (/* lista de códigos de retenção fiscal */) THEN 'RETIDA' ... END`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
"notas retidas", "entregas paradas na fiscalização", "notas bloqueadas".
--------------------------------------------------
VALOR: 'TRÂNSITO'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A entrega está ativamente em movimento. A mercadoria já saiu do ponto de origem (foi expedida) e está a caminho do destino, mas ainda não foi entregue nem está retida.
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
Este é o estado "intermediário". A coluna `SituacaoNF` recebe 'TRÂNSITO' quando as seguintes condições são verdadeiras:
`DataExpedicao IS NOT NULL AND DataEntrega IS NULL AND CodOcorrencia NOT IN (/* lista de códigos de retenção */)`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
"notas em trânsito", "entregas rodando", "notas que estão viajando", "o que está a caminho?".
--------------------------------------------------

IMPORTANTE: O filtro @SituacaoNF é mutuamente exclusivo com o @StatusAnaliseData na maioria dos casos. Uma pergunta geralmente foca ou no estado físico (SituacaoNF) ou na performance de prazo (StatusAnaliseData).

3.2.2. Detalhe da Lógica do Parâmetro @StatusAnaliseData (Análise de Performance)
---------------------------------------------------------------------------------

O parâmetro @StatusAnaliseData responde à pergunta fundamental: "A nota está cumprindo o prazo?". Ele representa uma camada de análise sobre a performance da entrega.

**Interação com a Procedure e o Banco de Dados:**

-   **Parâmetro na Procedure:** `@StatusAnaliseData VARCHAR(100)`
-   **Coluna Filtrada:** `vw.AnaliseData` na view `VW_NOTAS`.
-   **Mecanismo de Filtro:** A procedure aplica um filtro de igualdade exata: `... AND vw.AnaliseData = @StatusAnaliseData`.

Isso significa que a lógica para atribuir um dos status abaixo já foi calculada e materializada na coluna `vw.AnaliseData` dentro da view.

---
VALOR: 'ATRASO'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A entrega está atrasada. A data atual já ultrapassou a data de previsão de entrega e a nota ainda não foi finalizada.
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
A coluna `AnaliseData` recebe 'ATRASO' quando a seguinte condição é verdadeira:
`GETDATE() > PrevisaoEntrega AND DataEntrega IS NULL`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
"quais notas estão com atraso?", "notas fora do prazo".
--------------------------------------------------
VALOR: 'DIA SEGUINTE'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A entrega está programada para ocorrer no dia seguinte (amanhã).
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
A coluna `AnaliseData` recebe 'DIA SEGUINTE' quando a condição é:
`CAST(PrevisaoEntrega AS DATE) = CAST(DATEADD(DAY, 1, GETDATE()) AS DATE)`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
"notas previstas para amanhã", "entregas para o dia seguinte".
--------------------------------------------------
VALOR: 'DO DIA'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A entrega está programada para ocorrer no dia de hoje. A regra de negócio também interpreta "notas com data de agenda para hoje" como uma consulta a este status.
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
A coluna `AnaliseData` recebe 'DO DIA' quando a condição é:
`CAST(PrevisaoEntrega AS DATE) = CAST(GETDATE() AS DATE)`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
"notas previstas para hoje", "status DO DIA", "o que está agendado para hoje?".
--------------------------------------------------
VALOR: 'ENTREGUE'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A análise de performance para esta nota foi concluída com o resultado de "entregue".
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
A coluna `AnaliseData` recebe 'ENTREGUE' quando a condição é:
`DataEntrega IS NOT NULL OR SituacaoNF = 'ENTREGUE'`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
O usuário deve ser explícito, como: "notas cuja análise de performance foi ENTREGUE".
--------------------------------------------------
VALOR: 'FUTURO'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A entrega está programada para uma data futura que não é hoje nem amanhã (D+2 em diante).
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
A coluna `AnaliseData` recebe 'FUTURO' quando a condição é:
`CAST(PrevisaoEntrega AS DATE) > CAST(DATEADD(DAY, 1, GETDATE()) AS DATE)`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
"entregas em data futura".
--------------------------------------------------
VALOR: 'PREVISTO PARA 2 DIAS'
DESCRIÇÃO DA REGRA DE NEGÓCIO:
A entrega está programada para ocorrer daqui a exatos dois dias.
LÓGICA PROVÁVEL NO BANCO DE DADOS (na VW_NOTAS):
A coluna `AnaliseData` recebe 'PREVISTO PARA 2 DIAS' quando a condição é:
`CAST(PrevisaoEntrega AS DATE) = CAST(DATEADD(DAY, 2, GETDATE()) AS DATE)`
INTENÇÃO DO USUÁRIO (SINÔNIMOS):
"notas previstas para daqui a 2 dias".
--------------------------------------------------

3.2.3. Detalhe da Lógica do Parâmetro @Operacao (Tipo de Movimentação)
--------------------------------------------------------------------------

O parâmetro @Operacao responde à pergunta fundamental: "Qual é o propósito ou a natureza desta movimentação logística?". Ele classifica o tipo de operação, geralmente indicando se é um movimento de entrada (InBound) ou de saída (OutBound) de um determinado centro de distribuição ou localidade.

**Interação com a Procedure e o Banco de Dados:**

-   **Parâmetro na Procedure:** `@Operacao VARCHAR(100)`
-   **Coluna Filtrada:** `vw.Operacao` na view `VW_NOTAS`.
-   **Mecanismo de Filtro:** A procedure aplica um filtro de igualdade exata: `... AND vw.Operacao = @Operacao`. Diferente de filtros como `@Cliente`, este não utiliza `LIKE`, exigindo uma correspondência exata do valor.

A seguir, detalhamos os valores possíveis para este campo e suas respectivas regras de negócio.

---
**Padrão de Nomenclatura:** Os valores seguem o padrão `DIREÇÃO-LOCALIDADE`.
- **InBound:** Indica uma operação de ENTRADA de mercadorias em um local.
- **OutBound:** Indica uma operação de SAÍDA de mercadorias de um local.

---
VALOR: 'InBound-IPO'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de entrada de mercadorias na unidade/local 'IPO'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação InBound-IPO", "entradas para IPO".
--------------------------------------------------
VALOR: 'InBound-MAO'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de entrada de mercadorias na unidade/local 'MAO'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação InBound-MAO", "entradas para MAO".
--------------------------------------------------
VALOR: 'InBound-UDI'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de entrada de mercadorias na unidade/local 'UDI'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação InBound-UDI", "entradas para UDI".
--------------------------------------------------
VALOR: 'OutBound-BAR'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de saída de mercadorias da unidade/local 'BAR'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação OutBound-BAR", "saídas de BAR".
--------------------------------------------------
VALOR: 'OutBound-BAR-MAT.PRIMA'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação específica de saída de MATÉRIA-PRIMA da unidade/local 'BAR'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "saídas de matéria-prima de BAR".
--------------------------------------------------
VALOR: 'OutBound-IPO'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de saída de mercadorias da unidade/local 'IPO'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação OutBound-IPO", "saídas de IPO".
--------------------------------------------------
VALOR: 'OutBound-MAO'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de saída de mercadorias da unidade/local 'MAO'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação OutBound-MAO", "saídas de MAO".
--------------------------------------------------
VALOR: 'OutBound-RIO'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de saída de mercadorias da unidade/local 'RIO'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação OutBound-RIO", "saídas do RIO".
--------------------------------------------------
VALOR: 'OutBound-SPO'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de saída de mercadorias da unidade/local 'SPO'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação OutBound-SPO", "saídas de SPO".
--------------------------------------------------
VALOR: 'OutBound-UDI'
DESCRIÇÃO DA REGRA DE NEGÓCIO: Operação de saída de mercadorias da unidade/local 'UDI'.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "notas da operação OutBound-UDI", "saídas de UDI".
--------------------------------------------------

IMPORTANTE: Este é um filtro categórico e exato. A IA é treinada para extrair esses códigos específicos da pergunta do usuário.

3.3. Detalhe da Lógica dos Parâmetros de Ordenação Dinâmica
----------------------------------------------------------------

Os parâmetros @SortColumn e @SortDirection trabalham em conjunto para responder à pergunta fundamental: "Como os resultados devem ser classificados?". Eles permitem que a ordenação dos dados seja controlada dinamicamente pela IA, com base na intenção do usuário.

**Interação com a Procedure e o Banco de Dados:**

-   **Parâmetros na Procedure:** `@SortColumn VARCHAR(50)` e `@SortDirection VARCHAR(4) = 'ASC'`.
-   **Mecanismo de Filtro:** A procedure utiliza uma cláusula `ORDER BY` com múltiplas declarações `CASE`. Cada `CASE` verifica uma combinação específica de `@SortColumn` e `@SortDirection` e aplica a ordenação na coluna correspondente.
-   **Ordenação Padrão (Fallback):** Se nenhum parâmetro de ordenação for fornecido, ou como critério de desempate para registros com o mesmo valor na coluna ordenada, a procedure aplica uma ordenação padrão pela data de ocorrência mais recente (`vw.DataOcorrencia DESC`).

A seguir, detalhamos a função e os valores possíveis para cada parâmetro.

---
**Parâmetro: @SortColumn**
**Descrição:** Atua como um "seletor", definindo **qual coluna** será usada para a ordenação.

VALOR: 'data_entrega'
DESCRIÇÃO DA LÓGICA: Ordena os resultados com base na data em que a entrega foi efetivamente concluída.
COLUNA NO BANCO DE DADOS: `vw.DataEntrega`
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "ordenar pela entrega mais recente", "classificar pela entrega mais antiga".
--------------------------------------------------
VALOR: 'valor_nf'
DESCRIÇÃO DA LÓGICA: Ordena os resultados com base no valor monetário total da nota fiscal.
COLUNA NO BANCO DE DADOS: `vw.ValorNF`
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "ordenar pelo mais caro", "classificar pelo mais barato", "pelo maior valor", "pelo menor preço".
--------------------------------------------------
VALOR: 'data_emissao'
DESCRIÇÃO DA LÓGICA: Ordena os resultados com base na data em que a nota fiscal foi emitida.
COLUNA NO BANCO DE DADOS: `vw.EmissaoNota`
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "ordenar pelas mais novas", "classificar pelas emissões mais recentes".
--------------------------------------------------

---
**Parâmetro: @SortDirection**
**Descrição:** Atua como um "diretor", definindo **em qual direção** a coluna selecionada será ordenada. O valor padrão é `'ASC'`.

VALOR: 'ASC' (Ascendente)
DESCRIÇÃO DA LÓGICA:
- Para datas: Ordena do mais antigo para o mais recente.
- Para valores: Ordena do menor para o maior.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "mais antigo", "menor", "mais barato", "crescente".
--------------------------------------------------
VALOR: 'DESC' (Descendente)
DESCRIÇÃO DA LÓGICA:
- Para datas: Ordena do mais recente para o mais antigo.
- Para valores: Ordena do maior para o menor.
INTENÇÃO DO USUÁRIO (SINÔNIMOS): "mais recente", "maior", "mais caro", "decrescente".
--------------------------------------------------

IMPORTANTE: Para que a ordenação dinâmica funcione, o parâmetro @SortColumn DEVE ser fornecido. Se @SortColumn for nulo, o @SortDirection será ignorado e a procedure usará a ordenação padrão (`DataOcorrencia DESC`). A IA é treinada para sempre fornecer ambos os parâmetros em conjunto quando uma intenção de ordenação é detectada.

--------------------------------------------------------------------------------
4. DETALHE DA LÓGICA DO PARÂMETRO @TipoData
--------------------------------------------------------------------------------

O parâmetro @TipoData é o coração do filtro de datas. Ele responde à pergunta "Em qual evento de data devemos aplicar o filtro de período?".

CÓDIGO ('@TipoData'): '1'
COLUNA DA VW_NOTAS: vw.DataAgenda
DESCRIÇÃO: Retorna notas cuja DATA DE AGENDAMENTO está dentro do período @DE/@ATE.

CÓDIGO ('@TipoData'): '2'
COLUNA DA VW_NOTAS: vw.DataEntrega
DESCRIÇÃO: Retorna notas cujo EVENTO DE ENTREGA EFETIVA ocorreu dentro do período @DE/@ATE.

CÓDIGO ('@TipoData'): '3'
COLUNA DA VW_NOTAS: vw.EmissaoNota
DESCRIÇÃO: Retorna notas cuja DATA DE EMISSÃO está dentro do período @DE/@ATE.

CÓDIGO ('@TipoData'): '4'
COLUNA DA VW_NOTAS: vw.PrevisaoEntrega
DESCRIÇÃO: Retorna notas cuja PREVISÃO DE ENTREGA ORIGINAL está dentro do período @DE/@ATE.

CÓDIGO ('@TipoData'): '5'
COLUNA DA VW_NOTAS: vw.PrevisaoReal
DESCRIÇÃO: Retorna notas cuja PREVISÃO DE ENTREGA RECALCULADA/REAL está dentro do período @DE/@ATE.

CÓDIGO ('@TipoData'): '6'
COLUNA DA VW_NOTAS: vw.DataOcorrencia
DESCRIÇÃO: Retorna notas cuja DATA DE OCORRÊNCIA DE BAIXA ocorreu dentro do período @DE/@ATE.
REGRA ADICIONAL: Este filtro também exige que `vw.CodOcorrencia` seja 1 ou 7, que no sistema significam 'ENTREGUE' e 'ENTREGA REALIZADA', respectivamente.

--------------------------------------------------------------------------------
5. LÓGICAS DE NEGÓCIO E ARQUITETURA INTERNA
--------------------------------------------------------------------------------

A procedure contém regras de negócio e padrões de design importantes que afetam o resultado da consulta.

5.1. Período de Data Padrão
- Se NENHUMA DATA (@DE e @ATE são NULL) for fornecida na chamada, a procedure assume automaticamente um período padrão dos ÚLTIMOS 7 DIAS a partir da data atual.

5.2. Regras de Permissão de Usuário
O filtro final (WHERE) da consulta principal aplica as seguintes regras de acesso com base no @IdUsuario:
- @IdUsuario = 9999: É o usuário ADMINISTRADOR. Vê todos os resultados.
- @IdUsuario = 8888: Usuário especial para ver apenas as notas "SEM ASSOCIAÇÃO" de analista.
- Outros @IdUsuario: Um usuário padrão pode ver uma nota se:
    1. Ele for o ANALISTA PRINCIPAL associado à nota (TS.IdUsuario = @IdUsuario).
    2. A nota pertencer a um CLIENTE/TRANSPORTADORA associado a ele (TST.IdUsuario = @IdUsuario).

5.3. Consolidação de Fontes de Dados (Protheus vs. Outros)
- A procedure foi projetada para unificar dados de nível de serviço de múltiplas fontes. Nos `LEFT JOINs`, a lógica `COALESCE(NS.Coluna, NS_PROTHEUS.Coluna)` é usada extensivamente.
- Este padrão garante que, para cada nota, o sistema buscará primeiro as informações de nível de serviço na tabela `TK_NIVEL_SERVICO` (para origens não-Protheus) e, se não encontrar (`NS.Coluna` for nulo), buscará na `TK_NIVEL_SERVICO` novamente com chaves do Protheus (`NS_PROTHEUS.Coluna`), apresentando um resultado unificado.

5.4. Ordenação Padrão (Critério de Desempate)
- Se nenhuma ordenação for especificada através dos parâmetros `@SortColumn` e `@SortDirection`, ou como critério de desempate, os resultados são ordenados pela `DataOcorrencia` mais recente (`DESC`).

5.5. Salvaguarda de Performance (Full Scan)
- A procedure possui um bloco de validação no início que verifica se pelo menos um filtro principal (além das datas padrão) foi fornecido.
- Se nenhum filtro como @NF, @Cliente, @Transportadora, @SituacaoNF, etc., for passado, a procedure é interrompida (`RETURN`) e retorna uma estrutura de tabela vazia.
- Isso é uma medida de segurança crucial para impedir que um usuário acidentalmente execute uma consulta completa na view (`SELECT * FROM VW_NOTAS`), o que poderia causar sobrecarga no banco de dados.

--------------------------------------------------------------------------------
6. ESTRUTURA DE SAÍDA
--------------------------------------------------------------------------------

A procedure retorna um único SELECT contendo as colunas da VW_NOTAS para os registros filtrados, enriquecidas com dados adicionais dos JOINs. As colunas de data são formatadas para o padrão brasileiro DD/MM/AAAA.

--------------------------------------------------------------------------------
7. EXEMPLOS DE USO
--------------------------------------------------------------------------------

Exemplo 1: Busca simples por notas emitidas em um período.

    EXEC [dbo].[SP_TK_NOTAS_AI_HOM]
        @IdUsuario = 9999,
        @DE = '2025-09-01',
        @ATE = '2025-09-15',
        @TipoData = '3';

Exemplo 2: Simulação de uma busca complexa da IA.
(Notas para o cliente 'ACME', em trânsito, com atraso, ordenadas pelo maior valor, nos últimos 7 dias)

    EXEC [dbo].[SP_TK_NOTAS_AI_HOM]
        @IdUsuario = 123,
        @Cliente = 'ACME',
        @SituacaoNF = 'TRÂNSITO',
        @StatusAnaliseData = 'ATRASO',
        @SortColumn = 'valor_nf',
        @SortDirection = 'DESC';

*Neste caso, como @DE e @ATE não foram fornecidos, a procedure usará o período padrão dos últimos 7 dias.*
